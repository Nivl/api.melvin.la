package auth

// Code generated by api-cli; DO NOT EDIT\n

import (
	"errors"

	"github.com/melvin-laplanche/ml-api/src/apierror"
	"github.com/melvin-laplanche/ml-api/src/app"
	"github.com/melvin-laplanche/ml-api/src/db"
	uuid "github.com/satori/go.uuid"
)

// doCreate persists an object in the database
func (s *Session) doCreate() error {
	if s == nil {
		return errors.New("session not instanced")
	}

	s.ID = uuid.NewV4().String()
	s.CreatedAt = db.Now()

	stmt := "INSERT INTO sessions (id, created_at, deleted_at, user_id) VALUES (:id, :created_at, :deleted_at, :user_id)"
	_, err := app.GetContext().SQL.NamedExec(stmt, s)
	return err
}

// doUpdate updates an object in the database
func (s *Session) doUpdate() error {
	if s == nil {
		return apierror.NewServerError("session is not instanced")
	}

	if s.ID == "" {
		return apierror.NewServerError("cannot update a non-persisted session")
	}

	stmt := "UPDATE sessions SET id = $1, created_at = $2, deleted_at = $3, user_id = $4 WHERE id=$5"
	_, err := app.GetContext().SQL.Exec(stmt, s.ID, s.CreatedAt, s.DeletedAt, s.UserID, s.ID)
	return err
}

// FullyDelete removes an object from the database
func (s *Session) FullyDelete() error {
	if s == nil {
		return errors.New("session not instanced")
	}

	if s.ID == "" {
		return errors.New("session has not been saved")
	}

	_, err := sql().Exec("DELETE FROM sessions WHERE id=$1", s.ID)
	return err
}

// doDelete performs a soft delete operation on an object
func (s *Session) doDelete() error {
	if s == nil {
		return apierror.NewServerError("session is not instanced")
	}

	if s.ID == "" {
		return apierror.NewServerError("cannot delete a non-persisted session")
	}

	s.DeletedAt = db.Now()

	stmt := "UPDATE sessions SET deleted_at = $2 WHERE id=$1"
	_, err := sql().Exec(stmt, s.ID, *s.DeletedAt)
	return err
}

// IsZero checks if the object is either nil or don't have an ID
func (s *Session) IsZero() bool {
	return s == nil || s.ID == ""
}

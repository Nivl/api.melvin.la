package auth

// Code generated by api-cli; DO NOT EDIT\n

import (
	"errors"
	

	"github.com/melvin-laplanche/ml-api/src/apierror"
	"github.com/melvin-laplanche/ml-api/src/app"
	"github.com/melvin-laplanche/ml-api/src/db"
	uuid "github.com/satori/go.uuid"
)



// Save creates or updates the user depending on the value of the id
func (u *User) Save() error {
	if u == nil {
		return apierror.NewServerError("user is not instanced")
	}

	if u.ID == "" {
		return u.Create()
	}

	return u.Update()
}



// doCreate persists an object in the database
func (u *User) doCreate() error {
	if u == nil {
		return errors.New("user not instanced")
	}

	u.ID = uuid.NewV4().String()
	u.CreatedAt = db.Now()
	u.UpdatedAt = db.Now()

	stmt := "INSERT INTO users (id, created_at, updated_at, deleted_at, name, email, password) VALUES (:id, :created_at, :updated_at, :deleted_at, :name, :email, :password)"
	_, err := app.GetContext().SQL.NamedExec(stmt, u)
  return err
}



// doUpdate updates an object in the database
func (u *User) doUpdate() error {
	if u == nil {
		return apierror.NewServerError("user is not instanced")
	}

	if u.ID == "" {
		return apierror.NewServerError("cannot update a non-persisted user")
	}

	u.UpdatedAt = db.Now()

	stmt := "UPDATE users SET id = $1, created_at = $2, updated_at = $3, deleted_at = $4, name = $5, email = $6, password = $7 WHERE id=$8"
	_, err := app.GetContext().SQL.Exec(stmt, u.ID, u.CreatedAt, u.UpdatedAt, u.DeletedAt, u.Name, u.Email, u.Password, u.ID)
	return err
}

// FullyDelete removes an object from the database
func (u *User) FullyDelete() error {
	if u == nil {
		return errors.New("user not instanced")
	}

	if u.ID == "" {
		return errors.New("user has not been saved")
	}

	_, err := sql().Exec("DELETE FROM users WHERE id=$1", u.ID)
	return err
}

// Delete soft delete an object.
func (u *User) Delete() error {
	return u.doDelete()
}

// doDelete performs a soft delete operation on an object
func (u *User) doDelete() error {
	if u == nil {
		return apierror.NewServerError("user is not instanced")
	}

	if u.ID == "" {
		return apierror.NewServerError("cannot delete a non-persisted user")
	}

	u.DeletedAt = db.Now()

	stmt := "UPDATE users SET deleted_at = $2 WHERE id=$1"
	_, err := sql().Exec(stmt, u.ID, *u.DeletedAt)
	return err
}

// IsZero checks if the object is either nil or don't have an ID
func (u *User) IsZero() bool {
	return u == nil || u.ID == ""
}
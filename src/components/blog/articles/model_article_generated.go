package articles

// Code generated by api-cli; DO NOT EDIT\n

import (
	"errors"

	"github.com/melvin-laplanche/ml-api/src/apierror"
	"github.com/melvin-laplanche/ml-api/src/app"
	"github.com/melvin-laplanche/ml-api/src/db"
	uuid "github.com/satori/go.uuid"
)

// doCreate persists an object in the database
func (a *Article) doCreate() error {
	if a == nil {
		return errors.New("article not instanced")
	}

	a.ID = uuid.NewV4().String()
	a.CreatedAt = db.Now()
	a.UpdatedAt = db.Now()

	stmt := "INSERT INTO blog_articles (id, title, content, slug, subtitle, description, created_at, updated_at, deleted_at, is_published, user_id) VALUES (:id, :title, :content, :slug, :subtitle, :description, :created_at, :updated_at, :deleted_at, :is_published, :user_id)"
	_, err := app.GetContext().SQL.NamedExec(stmt, a)
	return err
}

// doUpdate updates an object in the database
func (a *Article) doUpdate() error {
	if a == nil {
		return apierror.NewServerError("article is not instanced")
	}

	if a.ID == "" {
		return apierror.NewServerError("cannot update a non-persisted article")
	}

	a.UpdatedAt = db.Now()

	stmt := "UPDATE blog_articles SET id = $1, title = $2, content = $3, slug = $4, subtitle = $5, description = $6, created_at = $7, updated_at = $8, deleted_at = $9, is_published = $10, user_id = $11 WHERE id=$12"
	_, err := app.GetContext().SQL.Exec(stmt, a.ID, a.Title, a.Content, a.Slug, a.Subtitle, a.Description, a.CreatedAt, a.UpdatedAt, a.DeletedAt, a.IsPublished, a.UserID, a.ID)
	return err
}

// FullyDelete removes an object from the database
func (a *Article) FullyDelete() error {
	if a == nil {
		return errors.New("article not instanced")
	}

	if a.ID == "" {
		return errors.New("article has not been saved")
	}

	_, err := sql().Exec("DELETE FROM blog_articles WHERE id=$1", a.ID)
	return err
}

// doDelete performs a soft delete operation on an object
func (a *Article) doDelete() error {
	if a == nil {
		return apierror.NewServerError("article is not instanced")
	}

	if a.ID == "" {
		return apierror.NewServerError("cannot delete a non-persisted article")
	}

	a.DeletedAt = db.Now()

	stmt := "UPDATE blog_articles SET deleted_at = $2 WHERE id=$1"
	_, err := sql().Exec(stmt, a.ID, *a.DeletedAt)
	return err
}

// IsZero checks if the object is either nil or don't have an ID
func (a *Article) IsZero() bool {
	return a == nil || a.ID == ""
}

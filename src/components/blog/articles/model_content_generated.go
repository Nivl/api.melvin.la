package articles

// Code generated by api-cli; DO NOT EDIT\n

import (
	"errors"
	

	"github.com/melvin-laplanche/ml-api/src/apierror"
	"github.com/melvin-laplanche/ml-api/src/app"
	"github.com/melvin-laplanche/ml-api/src/db"
	uuid "github.com/satori/go.uuid"
)



// Save creates or updates the content depending on the value of the id
func (c *Content) Save() error {
	if c == nil {
		return apierror.NewServerError("content is not instanced")
	}

	if c.ID == "" {
		return c.Create()
	}

	return c.Update()
}

// Create persists a user in the database
func (c *Content) Create() error {
	if c == nil {
		return apierror.NewServerError("content is not instanced")
	}

	if c.ID != "" {
		return apierror.NewServerError("cannot persist a content that already has a ID")
	}

	return c.doCreate()
}

// doCreate persists an object in the database
func (c *Content) doCreate() error {
	if c == nil {
		return errors.New("content not instanced")
	}

	c.ID = uuid.NewV4().String()
	c.CreatedAt = db.Now()
	c.UpdatedAt = db.Now()

	stmt := "INSERT INTO blog_article_contents (id, created_at, updated_at, deleted_at, article_id, is_current, is_draft, title, content, subtitle, description) VALUES (:id, :created_at, :updated_at, :deleted_at, :article_id, :is_current, :is_draft, :title, :content, :subtitle, :description)"
	_, err := app.GetContext().SQL.NamedExec(stmt, c)
  return err
}

// Update updates most of the fields of a persisted content.
// Excluded fields are id, created_at, deleted_at
func (c *Content) Update() error {
	if c == nil {
		return apierror.NewServerError("content is not instanced")
	}

	if c.ID == "" {
		return apierror.NewServerError("cannot update a non-persisted content")
	}

	return c.doUpdate()
}

// doUpdate updates an object in the database
func (c *Content) doUpdate() error {
	if c == nil {
		return apierror.NewServerError("content is not instanced")
	}

	if c.ID == "" {
		return apierror.NewServerError("cannot update a non-persisted content")
	}

	c.UpdatedAt = db.Now()

	stmt := "UPDATE blog_article_contents SET id = $1, created_at = $2, updated_at = $3, deleted_at = $4, article_id = $5, is_current = $6, is_draft = $7, title = $8, content = $9, subtitle = $10, description = $11 WHERE id=$12"
	_, err := app.GetContext().SQL.Exec(stmt, c.ID, c.CreatedAt, c.UpdatedAt, c.DeletedAt, c.ArticleID, c.IsCurrent, c.IsDraft, c.Title, c.Content, c.Subtitle, c.Description, c.ID)
	return err
}

// FullyDelete removes an object from the database
func (c *Content) FullyDelete() error {
	if c == nil {
		return errors.New("content not instanced")
	}

	if c.ID == "" {
		return errors.New("content has not been saved")
	}

	_, err := sql().Exec("DELETE FROM blog_article_contents WHERE id=$1", c.ID)
	return err
}

// Delete soft delete an object.
func (c *Content) Delete() error {
	return c.doDelete()
}

// doDelete performs a soft delete operation on an object
func (c *Content) doDelete() error {
	if c == nil {
		return apierror.NewServerError("content is not instanced")
	}

	if c.ID == "" {
		return apierror.NewServerError("cannot delete a non-persisted content")
	}

	c.DeletedAt = db.Now()

	stmt := "UPDATE blog_article_contents SET deleted_at = $2 WHERE id=$1"
	_, err := sql().Exec(stmt, c.ID, *c.DeletedAt)
	return err
}

// IsZero checks if the object is either nil or don't have an ID
func (c *Content) IsZero() bool {
	return c == nil || c.ID == ""
}